andic <- census %>%
filter(group %in% c("Andic"))
ggplot(andic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
mainlangs <- read_tsv("mainlangs.csv")
ggplot(mainlangs, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
dargwa <- census %>%
filter(group == "Dargwa")
ggplot(dargwa, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
tsezic <- census %>%
filter(group == "Tsezic")
ggplot(tsezic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
lezgic <- census %>%
filter(group == "Lezgic")
ggplot(lezgic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
lezgic_small <- lezgic %>%
filter(language != "Lezgian")
ggplot(lezgic_small, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
archi <- census %>%
filter(language == "Archi")
ggplot(archi, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
turkic <- census %>%
filter(group == "Turkic")
ggplot(turkic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
tat <- census %>%
filter(group == "Tat")
ggplot(tat, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
nr <- 1:89
sample(1:89, 89, replace=TRUE)
sample(1:89, 89, replace=FALSE)
nrsample <- sample(1:89, 89, replace=FALSE)
nrsample <- as.data.frame(sample(1:89, 89, replace=FALSE))
View(nrsample)
library(tidyverse)
survey <- read_tsv("negcopsurvey.csv")
survey$order <- sample(1:89, 89, replace=FALSE)
View(survey)
write.csv(survey, "surveywrandom.csv")
---
title: "R Notebook"
output: html_notebook
---
```{r}
library(tidyverse)
```
```{r}
dat <- read_delim("data.csv", delim="\t")
```
```{r}
dat
```
```{r}
proficiency <- (dat %>% filter(question == "proficiency") %>% t() %>% as.data.frame() %>% drop_na())[-1,] %>% as.data.frame() %>% rownames_to_column(var = "speaker") %>% filter(speaker != "total")
proficiency <- data.frame(speaker=proficiency$speaker, proficiency = proficiency$`.`)
```
```{r}
proficiency
```
```{r}
dat <- read_delim("~/dl/data_cropped.csv", delim="\t")
```
```{r}
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
```
```{r}
dat_long
```
```{r}
t.test(score ~ correct, data=dat_long %>% filter(correct != "unclear"))
```
```{r}
library(lme4)
library(lmerTest)
```
```{r}
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
```
```{r}
dat
```
```{r}
dat$animate
```
```{r}
library(effects)
```
```{r}
plot(predictorEffect("correct", model))
```
```{r}
dat %>% filter(system == "innovative") %>% pull(aux) %>% unique()
```
```{r}
auxes <- data.frame(aux = c("лъич1и", "гуч1и", "хуч1и"),
aux_anim = c("anim", "neutral", "nonanim"))
```
```{r}
dat_long %>% filter(system == "innovative") %>% left_join(auxes, by="aux") -> dat_long_inn
```
```{r}
sd(dat_long_inn$score)
```
```{r}
dat_long_inn
```
```{r}
dat_long_inn %>% group_by(animate, aux_anim) %>% summarise(score_sd = sd(score), score = mean(score), n=n())
```
```{r}
model <- lmer(score ~ animate*aux_anim + (1|name) + (1|subject), data=dat_long_inn)
```
```{r}
summary(model)
```
```{r}
plot(Effect(c("animate", "aux_anim"), model))
```
```{r}
dat_long_inn
```
```{r}
dat_long_inn %>% filter(aux_anim == "anim", animate == "yes")
```
```{r}
model <- lm(score ~ number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
```
```{r}
summary(model)
```
```{r}
plot(Effect("number", model))
```
```{r}
dat_long
```
```{r}
dat %>% pull(question) %>% unique()
```
```{r}
t.test(score_sd ~ system, data=dat_long %>% group_by(question) %>% summarise(score_sd = sd(score), system=first(system)))
```
```{r}
proficiency
```
```{r}
t.test(score_sd ~ proficiency, dat_long %>% group_by(name) %>% summarise(score_sd = sd(score)) %>% left_join(proficiency, by=c('name'= 'speaker')))
```
```{r}
model <- lmer(score ~ system + (1 | name), data=dat_long)
summary(model)
```
```{r}
model <- lmer(score ~ system + (1 | name), data=dat_long %>% filter(animate == "yes"))
summary(model)
```
```{r}
model <- lmer(score ~ system*animate + (1 | name), data=dat_long)
```
```{r}
summary(model)
```
```{r}
library(ggfortify)
```
```{r}
dat_long %>% pivot_wider(id_cols=name, names_from=question, values_from=score) -> dat_t
rownames(dat_t) <- dat_t$name
dat_t <- dat_t %>% select(-name)
autoplot(prcomp(dat_t), label=TRUE)
```
```{r}
library(corrplot)
```
```{r}
dat %>% select(starts_with("speaker"))
```
```{r}
corrplot(cor(dat %>% select(starts_with("speaker"))), method = 'color')
```
```{r}
install.packages("ggbeeswarm")
```
```{r}
library(ggbeeswarm)
```
```{r}
dat %>% select(speaker16, speaker22) %>% ggplot(aes(y=speaker16, x=speaker22)) + geom_beeswarm()
```
```{r}
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "an", animate=="yes"))
summary(model)
```
```{r}
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "anpl", animate=="yes"))
summary(model)
```
```{r}
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "n", animate=="yes"))
summary(model)
```
```{r}
t.test(score ~ number, data=dat_long %>% filter(correct == "yes") %>% filter(system == "inherited"))
```
```{r}
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
```
```{r}
model <- lm(score ~ human,
data=dat_long_inn %>% filter(aux_value == "n", animate=="yes"))
```
model <- lm(score ~ human,
data=dat_long_inn %>% filter(aux_value == "n", animate=="yes"))
library(tidyverse)
dat <- read_delim("data.csv", delim="\t")
proficiency <- (dat %>% filter(question == "proficiency") %>% t() %>% as.data.frame() %>% drop_na())[-1,] %>% as.data.frame() %>% rownames_to_column(var = "speaker") %>% filter(speaker != "total")
proficiency <- data.frame(speaker=proficiency$speaker, proficiency = proficiency$`.`)
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
library(lme4)
library(lmerTest)
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
dat
dat_long %>% filter(system == "innovative") %>% left_join(auxes, by="aux") -> dat_long_inn
model <- lm(score ~ human,
data=dat_long_inn %>% filter(aux_value == "n", animate=="yes"))
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
summary(model)
model <- lm(score ~ human,
data=dat_long_inn %>% filter(aux_value == "n", animate=="yes"))
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "n", animate=="yes"))
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "n", animate=="yes"))
summary(model)
model <- lm(score ~ system,
data=dat_long %>% filter(animate=="yes"))
summary(model)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
#packages
library(tidyverse)
library(wesanderson)
library(lme4)
library(lmerTest)
library(effects)
#data
setwd("/home/samira/Git/2021mt_negcop")
data <- read_tsv("data.csv")
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
#packages
#data manipulation
library(tidyverse)
#linear models
library(lme4)
library(lmerTest)
#plots
library(effects)
library(corrplot)
library(wesanderson)
#data
setwd("/home/samira/Git/2021mt_negcop")
data <- read_tsv("data.csv")
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
corrplot(cor(dat %>% select(starts_with("speaker"))), method = 'color')
t.test(score_sd ~ proficiency, dat_long %>% group_by(name) %>% summarise(score_sd = sd(score)) %>% left_join(proficiency, by=c('name'= 'speaker')))
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
summary(model)
#data
setwd("/home/samira/Git/2021mt_negcop")
data <- read_tsv("data.csv")
#packages
library(tidyverse)
library(wesanderson)
#remove proficiency question
no_prof <- data[-1,]
#score of individual auxiliaries overall
overall_aux <- no_prof %>%
select(aux)%>%
group_by(aux)%>%
summarise(nr = n())
overall_aux_score <- no_prof %>%
select(aux, avg) %>%
group_by(aux) %>%
summarise(score = sum(avg))
overall_aux$score <- overall_aux_score$score
overall_aux$avg_score <- (overall_aux$score / overall_aux$nr)
View(overall_aux)
#overall score with animates/inanimates
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
View(aux_score)
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
aux_score
#score of хуч1и by animacy
xu <- no_prof[(no_prof$aux == "хуч1и"),]
xu_an_nr <- xu %>%
select(aux, animate, avg) %>%
group_by(aux, animate) %>%
summarise(nr=n())
xu_score <- xu %>%
select(aux, animate, avg) %>%
group_by(aux, animate) %>%
summarise(score=sum(avg))
xu_score$nr <- xu_an_nr$nr
xu_score$avg_score <- (xu_score$score / xu_score$nr)
View(xu_score)
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
#packages
#data manipulation
library(tidyverse)
#linear models
library(lme4)
library(lmerTest)
#plots
library(effects)
library(corrplot)
library(wesanderson)
#data
setwd("/home/samira/Git/2021mt_negcop")
dat <- read_tsv("data.csv")
no_prof <- data[-1,]
#data
setwd("/home/samira/Git/2021mt_negcop")
dat <- read_tsv("data.csv")
no_prof <- dat[-1,]
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
proficiency <- (dat %>% filter(question == "proficiency") %>% t() %>% as.data.frame() %>% drop_na())[-1,] %>% as.data.frame() %>% rownames_to_column(var = "speaker") %>% filter(speaker != "total")
proficiency <- data.frame(speaker=proficiency$speaker, proficiency = proficiency$`.`)
corrplot(cor(dat %>% select(starts_with("speaker"))), method = 'color')
t.test(score_sd ~ proficiency, dat_long %>% group_by(name) %>% summarise(score_sd = sd(score)) %>% left_join(proficiency, by=c('name'= 'speaker')))
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
summary(model)
plot(predictorEffect("correct", model))
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
aux_score
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
aux_score %>%
sort(animate, decreasing = T)
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
books <- dat %>%
filter(subject_en %in% c("book", "books")) %>%
filter(system == "innovative")
View(books)
books <- dat %>%
filter(subject_en %in% c("book", "books")) %>%
filter(system == "innovative") %>%
select(subject_en, aux, avg)
books
books <- dat %>%
filter(subject_en %in% c("book", "books")) %>%
filter(system == "innovative") %>%
select(subject_en, aux, avg)
t(books)
books <- dat %>%
filter(subject_en %in% c("book", "books")) %>%
filter(system == "innovative") %>%
select(subject_en, aux, avg)
books
li <- no_prof[(no_prof$aux == "лъич1и"),]
li_nr <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(nr=n())
li_score <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(score=sum(avg))
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
li <- no_prof[(no_prof$aux == "лъич1и"),]
li_nr <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(nr=n())
li_score <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(score=sum(avg))
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
li_score
li <- no_prof[(no_prof$aux == "лъич1и"),]
li_nr <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(nr=n())
li_score <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(score=sum(avg))
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
li_score
View(dat)
View(dat_long)
table(dat_long$score)
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == c("anpl", "n")))
summary(model)
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "anpl"))
summary(model)
#human score for animate markers by system
animark <- no_prof %>%
filter(aux_value %in% c("an", "anpl"))%>%
filter(animate == "yes") %>%
filter(subject_en != "family")
human_nr <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(nr=n())
human_score <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(score_total = sum(avg))
human_score$nr <- human_nr$nr
human_score$avg_score <- (human_score$score_total / human_score$nr)
View(human_score)
inherited <- no_prof %>%
filter(system == "inherited") %>%
select(aux, number, avg)
View(inherited)
inherited_nr <- no_prof %>%
filter(system == "inherited") %>%
select(aux, correct, number, avg) %>%
group_by(aux, correct, number) %>%
summarise(nr=n())
inherited_nrscore <- no_prof %>%
filter(system == "inherited") %>%
select(aux, correct, number, avg) %>%
group_by(aux, correct, number) %>%
summarise(score=sum(avg))
inherited_nrscore$nr <- inherited_nr$nr
inherited_nrscore$avg_score <- (inherited_nrscore$score / inherited_nrscore$nr)
inherited_nrscore
