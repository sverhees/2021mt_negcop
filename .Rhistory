ggplot(dargwa, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
tsezic <- census %>%
filter(group == "Tsezic")
ggplot(tsezic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
lezgic <- census %>%
filter(group == "Lezgic")
ggplot(lezgic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
lezgic_small <- lezgic %>%
filter(language != "Lezgian")
ggplot(lezgic_small, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
archi <- census %>%
filter(language == "Archi")
ggplot(archi, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
turkic <- census %>%
filter(group == "Turkic")
ggplot(turkic, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
tat <- census %>%
filter(group == "Tat")
ggplot(tat, aes(census, pop)) +
geom_line(aes(colour = language, group = language))+
geom_point(aes(colour = language))+
theme_classic()
nr <- 1:89
sample(1:89, 89, replace=TRUE)
sample(1:89, 89, replace=FALSE)
nrsample <- sample(1:89, 89, replace=FALSE)
nrsample <- as.data.frame(sample(1:89, 89, replace=FALSE))
View(nrsample)
library(tidyverse)
survey <- read_tsv("negcopsurvey.csv")
survey$order <- sample(1:89, 89, replace=FALSE)
View(survey)
write.csv(survey, "surveywrandom.csv")
?lm()
model <- lm(score ~ number ~ human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
library(tidyverse)
dat <- read_delim("data.csv", delim="\t")
dat
proficiency
proficiency <- (dat %>% filter(question == "proficiency") %>% t() %>% as.data.frame() %>% drop_na())[-1,] %>% as.data.frame() %>% rownames_to_column(var = "speaker") %>% filter(speaker != "total")
proficiency <- data.frame(speaker=proficiency$speaker, proficiency = proficiency$`.`)
proficiency
dat <- read_delim("~/dl/data_cropped.csv", delim="\t")
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
dat_long
t.test(score ~ correct, data=dat_long %>% filter(correct != "unclear"))
library(lme4)
library(lmerTest)
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
dat
dat$animate
library(effects)
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "n", animate=="yes"))
summary(model)
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
model <- lm(score ~ number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
model <- lm(score ~ number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
library(tidyverse)
dat <- read_delim("data.csv", delim="\t")
dat
proficiency <- (dat %>% filter(question == "proficiency") %>% t() %>% as.data.frame() %>% drop_na())[-1,] %>% as.data.frame() %>% rownames_to_column(var = "speaker") %>% filter(speaker != "total")
proficiency <- data.frame(speaker=proficiency$speaker, proficiency = proficiency$`.`)
proficiency
dat <- read_delim("~/dl/data_cropped.csv", delim="\t")
dat %>% pivot_longer(cols = starts_with("speaker"), values_to = "score") -> dat_long
t.test(score ~ correct, data=dat_long %>% filter(correct != "unclear"))
library(lme4)
library(lmerTest)
model <- lmer(score ~ correct + (1 + correct|name), data=dat_long, control = lmerControl(optimizer="bobyqa"))
dat
dat$animate
library(effects)
plot(predictorEffect("correct", model))
dat %>% filter(system == "innovative") %>% pull(aux) %>% unique()
auxes <- data.frame(aux = c("лъич1и", "гуч1и", "хуч1и"),
aux_anim = c("anim", "neutral", "nonanim"))
dat_long %>% filter(system == "innovative") %>% left_join(auxes, by="aux") -> dat_long_inn
dat_long_inn %>% group_by(animate, aux_anim) %>% summarise(score_sd = sd(score), score = mean(score), n=n())
model <- lmer(score ~ animate*aux_anim + (1|name) + (1|subject), data=dat_long_inn)
summary(model)
plot(Effect(c("animate", "aux_anim"), model))
library(tidyverse)
library(lingtypology)
poss <- read_tsv("mt.csv")
coord <- read_tsv("genlang_points.csv")
coord <- read_tsv("genlangpoints.csv")
View(poss)
genlang <- read_tsv("genlangpoints.csv")
# split coordinate dataframe into Dargwa vs non-Dargwa
gen_dargwa <- genlang[(genlang$aff == "Dargwa"),]
gen_dargwa$idiom <- gen_dargwa$lang
gen_nodargwa <- genlang[!(genlang$aff == "Dargwa"),]
poss_genlang <- poss %>%
filter(genlang_point == "yes")
library(tidyverse)
library(lingtypology)
poss <- read_tsv("mt.csv")
genlang <- read_tsv("genlangpoints.csv")
# split coordinate dataframe into Dargwa vs non-Dargwa
gen_dargwa <- genlang[(genlang$aff == "Dargwa"),]
gen_dargwa$idiom <- gen_dargwa$lang
gen_nodargwa <- genlang[!(genlang$aff == "Dargwa"),]
poss_genlang <- poss %>%
filter(genlang_point == "yes")
poss_dargwa <- poss_genlang[(poss_genlang$lang == "Dargwa"),]
poss_nodargwa <- poss_genlang[!(poss_genlang$lang == "Dargwa"),]
genposs <- merge(poss_nodargwa, gen_nodargwa, by = "lang")
genposs_dargwa <- merge(poss_dargwa, gen_dargwa, by = "idiom")
genposs_dargwa <- genposs_dargwa[!names(genposs_dargwa) %in% c("lang.y")]
colnames(genposs_dargwa)[3] <- "lang"
genposs_dargwa <- genposs_dargwa %>%
relocate(idiom, .after = lang)
genposs <- genposs %>%
relocate(id, .before = lang)
all_genpoints <- rbind(genposs, genposs_dargwa)
map.feature(lang.gltc(all_genpoints$gltc),
latitude = all_genpoints$lat,
longitude = all_genpoints$lon,
features = all_genpoints$lang,
color = all_genpoints$lang_col,
legend = F,
label = all_genpoints$lang,
stroke.features = all_genpoints$value1,
stroke.color = "magma",
stroke.title = unique(all_genpoints$value1_name),
zoom.control = TRUE)
genposs <- genposs %>%
relocate(id, .before = lang)
genposs_dargwa <- genposs_dargwa[!names(genposs_dargwa) %in% c("lang.y")]
colnames(genposs_dargwa)[3] <- "lang"
genposs_dargwa <- genposs_dargwa %>%
relocate(idiom, .after = lang)
genposs <- genposs %>%
relocate(id, .before = lang)
all_genpoints <- rbind(genposs, genposs_dargwa)
View(lezgic)
View(genposs)
View(genposs_dargwa)
colnames(genposs_dargwa)[3] <- "lang"
genposs_dargwa <- genposs_dargwa[!names(genposs_dargwa) %in% c("lang.y")]
colnames(genposs_dargwa)[3] <- "lang"
genposs_dargwa <- genposs_dargwa %>%
relocate(idiom, .after = lang)
genposs <- merge(poss_nodargwa, gen_nodargwa, by = "lang")
genposs_dargwa <- merge(poss_dargwa, gen_dargwa, by = "idiom")
genposs_dargwa <- genposs_dargwa[!names(genposs_dargwa) %in% c("lang.y")]
View(genposs_dargwa)
genposs_dargwa <- genposs_dargwa %>%
relocate(idiom, .after = aff.x)
all_genpoints <- rbind(genposs, genposs_dargwa)
genposs_dargwa <- genposs_dargwa %>%
relocate(idiom, .after = aff.x) %>%
relocate(lang.x, before = id)
colnames(genposs_dargwa)[1] <- "lang"
all_genpoints <- rbind(genposs, genposs_dargwa)
map.feature(lang.gltc(all_genpoints$gltc),
latitude = all_genpoints$lat,
longitude = all_genpoints$lon,
features = all_genpoints$lang,
color = all_genpoints$lang_col,
legend = F,
label = all_genpoints$lang,
stroke.features = all_genpoints$value1,
stroke.color = "magma",
stroke.title = unique(all_genpoints$value1_name),
zoom.control = TRUE)
map.feature(lang.gltc(all_genpoints$gltc),
latitude = all_genpoints$lat,
longitude = all_genpoints$lon,
features = all_genpoints$lang,
color = all_genpoints$lang_col,
legend = F,
label = all_genpoints$lang,
stroke.features = all_genpoints$value,
stroke.color = "magma",
stroke.title = unique(all_genpoints$value_name),
zoom.control = TRUE)
all_genpoints$lang <- factor(villages$lang, levels =c(
"Dargwa", "Lak", "Tsova-Tush", "Ingush", "Chechen", "Khinalug", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Agul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Khwarshi", "Nogai", "Kumyk", "Azerbaijani", "Armenian", "Tat", "Georgian"))
all_genpoints$lang <- factor(all_genpoints$lang, levels =c(
"Dargwa", "Lak", "Tsova-Tush", "Ingush", "Chechen", "Khinalug", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Agul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Khwarshi", "Nogai", "Kumyk", "Azerbaijani", "Armenian", "Tat", "Georgian"))
map.feature(lang.gltc(all_genpoints$gltc),
latitude = all_genpoints$lat,
longitude = all_genpoints$lon,
features = all_genpoints$lang,
color = all_genpoints$lang_col,
legend = F,
label = all_genpoints$lang,
stroke.features = all_genpoints$value,
stroke.color = "magma",
stroke.title = unique(all_genpoints$value_name))
map.feature(lang.gltc(all_genpoints$gltc),
latitude = all_genpoints$lat,
longitude = all_genpoints$lon,
features = all_genpoints$lang,
color = all_genpoints$lang_col,
label = all_genpoints$lang,
stroke.features = all_genpoints$value,
stroke.color = "magma",
stroke.title = unique(all_genpoints$value_name))
model <- lm(score ~ number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
model <- lm(score ~ number + human,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
summary(model)
model <- lm(score ~ human*number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
summary(model)
model <- lm(score ~ number,
data=dat_long_inn %>% filter(aux_value == "an", animate=="yes"))
summary(model)
model <- lm(score ~ human,
data=dat_long %>% filter(aux_value == "an", animate=="yes"))
summary(model)
#human score for animate markers by system
animark <- no_prof %>%
filter(aux_value %in% c("an", "anpl"))%>%
filter(animate == "yes") %>%
filter(subject_en != "family")
human_nr <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(nr=n())
human_score <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(score_total = sum(avg))
human_score$nr <- human_nr$nr
human_score$avg_score <- (human_score$score_total / human_score$nr)
human_nr <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(nr=n())
#human score for animate markers by system
animark <- no_prof %>%
filter(aux_value %in% c("an", "anpl"))%>%
filter(animate == "yes") %>%
filter(subject_en != "family")
#packages
library(tidyverse)
library(wesanderson)
#data
setwd("/home/samira/Git/2021mt_negcop")
data <- read_tsv("data.csv")
#total and avg scores
data$total <- rowSums(data[ , c(10:33)], na.rm=TRUE)
data$avg <- (data$total / 24)
#remove proficiency question
no_prof <- data[-1,]
#average score of correct vs. incorrect examples
correct <- no_prof[(no_prof$correct == "yes"),]
incorrect <- no_prof[(no_prof$correct == "no"),]
correct_avg <- (sum(correct$avg)/55)
incorrect_avg <- (sum(incorrect$avg)/33)
#plot all auxiliaries with all subjects
q <- ggplot(no_prof, aes(subject_en, total)) +
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
theme_classic()
q + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#plot all auxiliaries with all subjects by number
q <- no_prof %>%
mutate(value = fct_reorder(subject_en, desc(avg))) %>%
ggplot(aes(x=value, y=avg))+
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
theme_classic()+
facet_grid(~number)
q + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#plot only auxiliaries of the innovative system
innov <- no_prof[(no_prof$system == "innovative"),]
q2 <- innov %>%
mutate(subject = fct_reorder(subject_en, desc(avg))) %>%
ggplot(aes(x=subject, y=avg))+
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
scale_color_manual(values=wes_palette(n=3, name="Moonrise3"))+
theme_classic()
q2 + theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
#plot only animate forms
an <- no_prof %>%
filter(aux %in% c("лъич1и", "рук1ич1а"))
q3 <- ggplot(an, aes(fct_reorder(subject_en, desc(avg)), avg)) +
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
scale_color_manual(values=c("#006B3C", "#8A2BE2"))+
theme_classic()
q3 + theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
#score of individual auxiliaries overall
overall_aux <- no_prof %>%
select(aux)%>%
group_by(aux)%>%
summarise(nr = n())
overall_aux_score <- no_prof %>%
select(aux, avg) %>%
group_by(aux) %>%
summarise(score = sum(avg))
overall_aux$score <- overall_aux_score$score
overall_aux$avg_score <- (overall_aux$score / overall_aux$nr)
#overall score with animates/inanimates
aux_nr <- no_prof %>%
select(aux, animate)%>%
group_by(aux, animate) %>%
summarise(nr = n())
aux_score <- no_prof %>%
select(aux, animate, avg)%>%
group_by(aux, animate) %>%
summarise(score = sum(avg))
aux_score$nr <- aux_nr$nr
aux_score$avg_score <- (aux_score$score / aux_score$nr)
#score of хуч1и by animacy
xu <- no_prof[(no_prof$aux == "хуч1и"),]
xu_an_nr <- xu %>%
select(aux, animate, avg) %>%
group_by(aux, animate) %>%
summarise(nr=n())
xu_score <- xu %>%
select(aux, animate, avg) %>%
group_by(aux, animate) %>%
summarise(score=sum(avg))
xu_score$nr <- xu_an_nr$nr
xu_score$avg_score <- (xu_score$score / xu_score$nr)
#score of лъич1и
li <- no_prof[(no_prof$aux == "лъич1и"),]
li <- li %>%
select(subject_en, number, avg)
#write.csv(li, "li_avg_scores.csv")
#score of рук1ич1а
ruki <- no_prof[(no_prof$aux == "рук1ич1а"),]
ruki <- ruki %>%
select(subject_en, avg)
# score of inherited system
inherit <- no_prof[(no_prof$system == "inherited"),]
q4 <- inherit %>%
mutate(subject = fct_reorder(subject_en, desc(avg))) %>%
ggplot(aes(x=subject, y=avg))+
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
theme_classic()+
facet_grid(~number)
q4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
inherit_nr <- inherit %>%
select(correct, number, avg) %>%
group_by(correct, number) %>%
summarise(nr = n())
inherit_score <- inherit %>%
select(correct, number, avg) %>%
group_by(correct, number) %>%
summarise(score_total = sum(avg))
inherit_score$nr <- inherit_nr$nr
inherit_score$avg_score <- (inherit_score$score_total / inherit_score$nr)
#inherited score by number
inheritcop_nr <- inherit %>%
select(aux, correct, number, avg) %>%
group_by(aux, correct, number) %>%
summarise(nr = n())
inheritcop_score <- inherit %>%
select(aux, correct, number, avg) %>%
group_by(aux, correct, number) %>%
summarise(score_total = sum(avg))
inheritcop_score$nr <- inheritcop_nr$nr
inheritcop_score$avg_score <- (inheritcop_score$score_total / inheritcop_score$nr)
#human score for animate markers by system
animark <- no_prof %>%
filter(aux_value %in% c("an", "anpl"))%>%
filter(animate == "yes") %>%
filter(subject_en != "family")
human_nr <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(nr=n())
human_score <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(score_total = sum(avg))
human_score$nr <- human_nr$nr
human_score$avg_score <- (human_score$score_total / human_score$nr)
#score for animates with inanmarkers
nan <- no_prof %>%
filter(aux_value %in% c("n", "inan"))
innan <- nan %>%
select(aux_value, human, avg) %>%
group_by(aux_value, human) %>%
summarise(nr=n())
innan_score <- nan %>%
select(aux_value, human, avg) %>%
group_by(aux_value, human) %>%
summarise(score_total = sum(avg))
innan_score$nr <- innan$nr
innan_score$avg_score <- (innan_score$score_total / innan_score$nr)
View(human_score)
View(overall_aux)
View(overall_aux_score)
View(xu_an_nr)
View(innan_score)
#score of лъич1и
li <- no_prof[(no_prof$aux == "лъич1и"),]
li <- li %>%
select(subject_en, number, avg)
View(li)
li_score <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(score=sum(avg))
li_nr <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(nr=n())
li_score <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(score=sum(avg))
li_score$nr <- li_an_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
View(li_score)
li_nr <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(nr=n())
li_score <- li %>%
select(subject_en, number, avg) %>%
group_by(subject_en, number) %>%
summarise(score=sum(avg))
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
li_nr <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(nr=n())
li_score <- li %>%
select(number, avg) %>%
group_by(number) %>%
summarise(score=sum(avg))
li_score$nr <- li_nr$nr
li_score$avg_score <- (li_score$score / li_score$nr)
View(li_score)
#score of рук1ич1а
ruki <- no_prof[(no_prof$aux == "рук1ич1а"),]
ruki <- ruki %>%
select(subject_en, avg)
# score of inherited system
inherit <- no_prof[(no_prof$system == "inherited"),]
q4 <- inherit %>%
mutate(subject = fct_reorder(subject_en, desc(avg))) %>%
ggplot(aes(x=subject, y=avg))+
geom_line(aes(colour = aux, group = aux))+
geom_point(aes(colour = aux))+
theme_classic()+
facet_grid(~number)
q4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
inherit_nr <- inherit %>%
select(correct, number, avg) %>%
group_by(correct, number) %>%
summarise(nr = n())
inherit_score <- inherit %>%
select(correct, number, avg) %>%
group_by(correct, number) %>%
summarise(score_total = sum(avg))
inherit_score$nr <- inherit_nr$nr
inherit_score$avg_score <- (inherit_score$score_total / inherit_score$nr)
View(inherit_score)
#human score for animate markers by system
animark <- no_prof %>%
filter(aux_value %in% c("an", "anpl"))%>%
filter(animate == "yes") %>%
filter(subject_en != "family")
human_nr <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(nr=n())
human_score <- animark %>%
select(system, human, avg) %>%
group_by(system, human) %>%
summarise(score_total = sum(avg))
human_score$nr <- human_nr$nr
human_score$avg_score <- (human_score$score_total / human_score$nr)
View(human_score)
dat %>% pull(question) %>% unique()
t.test(score_sd ~ system, data=dat_long %>% group_by(question) %>% summarise(score_sd = sd(score), system=first(system)))
